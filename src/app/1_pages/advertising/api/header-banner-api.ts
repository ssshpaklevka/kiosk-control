import { apiClient } from "@/app/3_features/api/api-client";
import {
  BannerMain,
  CreateBanner,
  UpdateBannerMainDto,
} from "../types/adevrtising";

export const headerBannerApi = {
  // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –±–∞–Ω–Ω–µ—Ä–æ–≤ –≤ —à–∞–ø–∫–µ –∑–∞–∫–∞–∑–∞
  getBanners: async (): Promise<BannerMain[]> => {
    try {
      const response = await apiClient.get("/banner-menu");
      return Array.isArray(response.data)
        ? response.data
        : response.data?.data || response.data?.bannerMenu || [];
    } catch (error) {
      console.error("API Error:", error);
      throw error;
    }
  },

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ –ø–æ id
  getBannerById: async (id: number): Promise<BannerMain> => {
    const response = await apiClient.get(`/banner-menu/${id}`);
    return response.data;
  },

  // –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
  createBanner: async (bannerData: CreateBanner): Promise<BannerMain> => {
    const formData = new FormData();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    formData.append("file", bannerData.file);

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∫–∞–∫ —Å—Ç—Ä–æ–∫–∏ (FormData —Ç—Ä–µ–±—É–µ—Ç —Å—Ç—Ä–æ–∫–∏)
    formData.append("name", bannerData.name);
    formData.append("seconds", bannerData.seconds.toString());
    formData.append("is_active", bannerData.is_active.toString());

    // –î–æ–±–∞–≤–ª—è–µ–º store —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (bannerData.store && bannerData.store.length > 0) {
      bannerData.store.forEach((storeId, index) => {
        formData.append(`store[${index}]`, storeId);
      });
    }

    console.log("üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞–Ω–Ω–µ—Ä–∞ –≤ —à–∞–ø–∫–µ:", {
      name: bannerData.name,
      seconds: bannerData.seconds,
      is_active: bannerData.is_active,
      store: bannerData.store,
      hasFile: !!bannerData.file,
    });

    const response = await apiClient.post("/banner-menu", formData, {
      headers: {
        "Content-Type": "multipart/form-data",
      },
      timeout: 60000, // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    });
    return response.data;
  },

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –±–∞–Ω–Ω–µ—Ä–∞
  updateBanner: async (
    id: number,
    bannerData: UpdateBannerMainDto
  ): Promise<BannerMain> => {
    const formData = new FormData();

    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –ø–æ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã
    if (bannerData.file) {
      formData.append("file", bannerData.file);
    }

    if (bannerData.name !== undefined) {
      formData.append("name", bannerData.name);
    }

    if (bannerData.seconds !== undefined) {
      formData.append("seconds", bannerData.seconds.toString());
    }

    if (bannerData.is_active !== undefined) {
      formData.append("is_active", bannerData.is_active.toString());
    }

    if (bannerData.store !== undefined) {
      bannerData.store.forEach((storeId, index) => {
        formData.append(`store[${index}]`, storeId);
      });
    }

    const response = await apiClient.patch(`/banner-menu/${id}`, formData);
    return response.data;
  },

  // –£–¥–∞–ª–µ–Ω–∏–µ –±–∞–Ω–Ω–µ—Ä–∞ (–µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è)
  deleteBanner: async (id: number): Promise<void> => {
    await apiClient.delete(`/banner-menu/${id}`);
  },
};
